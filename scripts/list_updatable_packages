#!/usr/bin/env python3

import json
import os
from collections import namedtuple
from pathlib import Path
from typing import Generator, Iterable, Tuple

from debian.changelog import Changelog  # type: ignore
from debian.debian_support import NativeVersion  # type: ignore

import requests

SESSION = requests.Session()


Package = namedtuple('Package', ['package_name', 'version', 'gem_name', 'directory'])


def find_package_directories() -> Generator[Tuple, None, None]:
    for plugin_rb in Path('plugins/').glob('**/*.rb'):
        gem_name = plugin_rb.read_text().strip().split()[1].strip("',\"")
        directory = plugin_rb.parent
        package_changelog = next(directory.glob('**/changelog'))
        yield (gem_name, directory, package_changelog)

    for dependency in Path('dependencies/bookworm/').glob('*'):
        gem_name = dependency.name
        directory = dependency
        package_changelog = directory / 'changelog'
        build_vars_file = directory / 'build_vars.sh'
        if build_vars_file.is_file():
            build_vars = dict([line.split('=', 1) for line in build_vars_file.read_text().strip().splitlines()])
        else:
            build_vars = {}
        build_type = build_vars.get('BUILD_TYPE', 'gem')
        if build_type == 'gem':
            yield (gem_name, directory, package_changelog)


def find_packages() -> Generator[Package, None, None]:
    for gem_name, directory, package_changelog in find_package_directories():
        with package_changelog.open() as debchangelog:
            changelog = Changelog(debchangelog)
            version = NativeVersion(changelog.version).upstream_version
            yield Package(str(changelog.package), version, gem_name, directory.as_posix())


def latest_version(spec: Package) -> str:
    if spec.gem_name:
        url = f'https://rubygems.org/api/v1/versions/{spec.gem_name}/latest.json'
        response = SESSION.get(url)
        response.raise_for_status()
        return response.json()['version']
    raise ValueError('Unable to determine latest version', spec)


def build_matrix(specs: Iterable[Package]) -> Generator[dict, None, None]:
    for spec in specs:
        current_version = spec.version
        new_version = latest_version(spec)
        if current_version != new_version:
            entry = {
                'directory': spec.directory,
                'package_name': spec.package_name,
                'gem_name': spec.gem_name,
                'current_version': current_version,
                'new_version': new_version,
            }
            yield entry


def main() -> None:
    matrix = list(build_matrix(find_packages()))

    if 'GITHUB_ACTION' in os.environ:
        directories = [entry['directory'] for entry in matrix]
        with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            print(f'directories={json.dumps(directories)}', file=github_output)
            print(f'matrix={json.dumps(matrix)}', file=github_output)
    for entry in matrix:
        print(entry['directory'], entry['new_version'])


if __name__ == '__main__':
    main()
