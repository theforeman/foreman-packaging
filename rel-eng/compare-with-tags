#!/usr/bin/env python3
#
# Compares tito.props with koji and prints out differences in Github markup for
# review and cleanup.
#

from configparser import ConfigParser
from pathlib import Path
from subprocess import check_output
from typing import Set


def sclize(package: str, scl: str) -> str:
    if package.startswith(('rubygem-', 'nodejs-')):
        return f"{scl}-{package}"
    return package


def get_koji_packages(tag: str) -> Set[str]:
    command = ['koji', 'list-pkgs', f'--tag={tag}', '--quiet']
    output = check_output(command, universal_newlines=True)
    return {line.split(None, 1)[0] for line in output.splitlines()}


def main(filename: Path) -> None:
    cfg = ConfigParser()

    read = cfg.read(filename)
    if read != [str(filename)]:
        raise SystemExit(f'Failed to read {filename}')

    for tag, entry in cfg.items():
        comps_packages = set(entry.get('whitelist', '').split())
        if not comps_packages:
            continue

        try:
            scl = entry['scl']
        except KeyError:
            pass
        else:
            comps_packages = {sclize(package, scl) for package in comps_packages}

        koji_packages = get_koji_packages(tag)

        missing_packages = comps_packages - koji_packages
        extra_packages = koji_packages - comps_packages

        if missing_packages:
            print(f"\n# Packages missing in tag {tag}")
            for missing_package in sorted(missing_packages):
                print(f" * [x] {missing_package}")
            print("```shell")
            print(f"koji add-pkg --owner=kojiadm {tag} {' '.join(sorted(missing_packages))}")
            print("```")

        if extra_packages:
            print(f"\n# Packages not expected in {tag}")
            for extra_package in sorted(extra_packages):
                print(f" * [x] {extra_package}")
            print("```shell")
            print(f"koji remove-pkg {tag} {' '.join(sorted(extra_packages))}")
            print("```")


if __name__ == '__main__':
    try:
        main(Path(__file__).parent / 'tito.props')
    except KeyboardInterrupt:
        pass
